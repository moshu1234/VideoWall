package andrewl.videowall.DataBase.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import andrewl.videowall.DataBase.greendao.DaoSession;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T_WallData.
*/
public class WallDataDao extends AbstractDao<WallData, Long> {

    public static final String TABLENAME = "T_WallData";

    /**
     * Properties of entity WallData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(5, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Age = new Property(6, Integer.class, "age", false, "AGE");
        public final static Property RegisterDate = new Property(7, java.util.Date.class, "registerDate", false, "REGISTER_DATE");
        public final static Property AuthCode = new Property(8, String.class, "authCode", false, "AUTH_CODE");
        public final static Property LocalPicAddr = new Property(9, String.class, "localPicAddr", false, "LOCAL_PIC_ADDR");
        public final static Property RemotePicAddr = new Property(10, String.class, "remotePicAddr", false, "REMOTE_PIC_ADDR");
        public final static Property LocalVideoAddr = new Property(11, String.class, "localVideoAddr", false, "LOCAL_VIDEO_ADDR");
        public final static Property RemoteVideoAddr = new Property(12, String.class, "remoteVideoAddr", false, "REMOTE_VIDEO_ADDR");
    };


    public WallDataDao(DaoConfig config) {
        super(config);
    }
    
    public WallDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T_WallData' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'TYPE' INTEGER," + // 2: type
                "'NAME' TEXT," + // 3: name
                "'SEX' TEXT," + // 4: sex
                "'BIRTHDAY' INTEGER," + // 5: birthday
                "'AGE' INTEGER," + // 6: age
                "'REGISTER_DATE' INTEGER," + // 7: registerDate
                "'AUTH_CODE' TEXT," + // 8: authCode
                "'LOCAL_PIC_ADDR' TEXT," + // 9: localPicAddr
                "'REMOTE_PIC_ADDR' TEXT," + // 10: remotePicAddr
                "'LOCAL_VIDEO_ADDR' TEXT," + // 11: localVideoAddr
                "'REMOTE_VIDEO_ADDR' TEXT);"); // 12: remoteVideoAddr
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T_WallData'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WallData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(6, birthday.getTime());
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(7, age);
        }
 
        java.util.Date registerDate = entity.getRegisterDate();
        if (registerDate != null) {
            stmt.bindLong(8, registerDate.getTime());
        }
 
        String authCode = entity.getAuthCode();
        if (authCode != null) {
            stmt.bindString(9, authCode);
        }
 
        String localPicAddr = entity.getLocalPicAddr();
        if (localPicAddr != null) {
            stmt.bindString(10, localPicAddr);
        }
 
        String remotePicAddr = entity.getRemotePicAddr();
        if (remotePicAddr != null) {
            stmt.bindString(11, remotePicAddr);
        }
 
        String localVideoAddr = entity.getLocalVideoAddr();
        if (localVideoAddr != null) {
            stmt.bindString(12, localVideoAddr);
        }
 
        String remoteVideoAddr = entity.getRemoteVideoAddr();
        if (remoteVideoAddr != null) {
            stmt.bindString(13, remoteVideoAddr);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WallData readEntity(Cursor cursor, int offset) {
        WallData entity = new WallData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // birthday
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // age
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // registerDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // authCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // localPicAddr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // remotePicAddr
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // localVideoAddr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // remoteVideoAddr
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WallData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setAge(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRegisterDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setAuthCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocalPicAddr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRemotePicAddr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocalVideoAddr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemoteVideoAddr(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WallData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WallData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
